// This header file was auto-generated by ClassMate++
// Created: 2 May 2020 8:43:52 pm
// Copyright (c) 2020, HurleyWorks

#pragma once

using Microsoft::glTF::Document;
using Microsoft::glTF::GLTFResourceReader;
using Microsoft::glTF::MeshPrimitive;
using Microsoft::glTF::StreamReader;
using sabi::LoadData;
using sabi::RenderableData;

class GLTFloader
{
 public:
    GLTFloader() = default;
    ~GLTFloader() = default;

    void load (const std::filesystem::path path, LoadData& loadData);

 private:
    Document document;
    std::unique_ptr<StreamReader> streamReader;
    std::unique_ptr<GLTFResourceReader> resourceReader;
    std::filesystem::path glTFfolder;

    // our mesh uses 1 vertex array which we 
    // construct from all the gltfMeshPrimitive vertices
    // this vector keeps track on the offsets into
    // the array so we can remap each set of primitive indices
    // to our single vertex array
    std::vector<uint32_t> vertexOffsets;

    // helpers
    void createDocument (const std::filesystem::path& path);

    void parseGLTFMesh (RenderableData& data, const Microsoft::glTF::Mesh& mesh);
    uint32_t getTotalVertexCount (const Microsoft::glTF::Mesh& mesh);

    void getVertices (RenderableData& data, const Microsoft::glTF::Mesh& mesh);
    void getTriangles (RenderableData& data, const Microsoft::glTF::Mesh& mesh);
    void getMaterials (RenderableData& data, const Microsoft::glTF::Mesh& mesh);
    void getTextureCoords_0 (RenderableData& data, const Microsoft::glTF::Mesh& mesh);
    void getTextureCoords_1 (RenderableData& data, const Microsoft::glTF::Mesh& mesh);

}; // end class GLTFloader
