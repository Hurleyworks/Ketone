// This header file was auto-generated by ClassMate++
// Created: 3 May 2020 4:34:01 pm
// Copyright (c) 2020, HurleyWorks

#pragma once

using sabi::MeshBuffersHandle;
using sabi::VMapDB;

using Accessors = std::pair<std::string, std::string>;
using Microsoft::glTF::BufferBuilder;
using Microsoft::glTF::Document;
using Microsoft::glTF::ResourceWriter;
using Microsoft::glTF::Asset;

class GLTFsaver
{
 public:
    GLTFsaver();
    ~GLTFsaver();

    void serializeMesh (const std::filesystem::path& outputFolder, MeshBuffersHandle& meshToSerialize, const std::string& outputName);

 private:
    MeshBuffersHandle mesh = nullptr;

    Document document;
    std::unique_ptr<ResourceWriter> resourceWriter;
    std::unique_ptr<BufferBuilder> bufferBuilder = nullptr;

    void createBuffer (const std::string& bufferID);
    std::string createMesh();
    std::string createMaterial (sabi::Material& mat);
    std::string createIndices (const MatrixXu& F, MatrixXf& V, MatrixXf& N);
    std::string createVertices (const MatrixXf& V);
    std::string createVertexNormals (const MatrixXf& N);
    std::string createTextureCoords_0 (const VMapDB& vmaps);

}; // end class GLTFsaver
