// This header file was auto-generated by ClassMate++
// Created: 9 Sep 2020 6:36:59 am
// Copyright (c) 2020, HurleyWorks

#pragma once

class SimpleRenderer : public IRenderer
{
 public:
    static IRendererRef create (OptiXStateRef state) { return std::make_shared<SimpleRenderer> (state); }

 public:
    SimpleRenderer (OptiXStateRef state);
    ~SimpleRenderer();

    void initialize (CameraHandle& camera) override;
    float render (CameraHandle& camera, PipelineHandlerRef& pipeline) override;
    void updateCamera (CameraHandle& camera) override;
    void onResize (CameraHandle& camera) override;
    RenderableNode pick (float x, float y, PipelineHandlerRef& pipeline) override
    {
        plp.pickingEnabled = 1;

        // OptiX launch index 0,0 is *bottom* left
        // so subtract Y coord from screen height
        plp.pickingFragment = make_float2 (x, renderHeight - y);

        CUDADRV_CHECK (cuMemcpyHtoDAsync (plpOnDevice, &plp, sizeof (plp), state->cuStream));
        pipeline->pl().launch (state->cuStream, plpOnDevice, 1, 1, 1);
        CUDADRV_CHECK (cuStreamSynchronize (state->cuStream));

        plp.pickingEnabled = 0;
        return picker.getPick();
    }

 private:
    PickHandler picker;
    SimpleShared::PipelineLaunchParameters plp;
    CUdeviceptr plpOnDevice;
    optixu::HostBlockBuffer2D<float4, 1> accumBuffer;
   
}; // end class SimpleRenderer
