// This header file was auto-generated by ClassMate++
// Created: 9 Aug 2020 3:08:12 pm
// Copyright (c) 2020, HurleyWorks

#pragma once

class PathTracer : public IRenderer
{
 public:
    static MoojiRendererRef create (const PropertyService& properties) { return std::make_shared<PathTracer> (properties); }

 public:
    PathTracer (const PropertyService& properties);
    ~PathTracer();

    void initialize (MoojiStateRef& state, CameraHandle& camera) override
    {
        denoiser.initialize (state, renderWidth, renderHeight);
        IRenderer::initialize (state, camera);
    }

    void generatePickRay (float x, float y) override
    {
        LOG (DBUG) << "Picking at: " << x << ", " << y;
        plp.pickingEnabled = 1;
        plp.pickingFragment = make_float2 (x, y);
        pickedNode = nullptr;
    }
    RenderableNode getPickedNode() const { return pickedNode; }

    void onResize (CameraHandle& camera) override
    {
        resize (camera);
        camera->setDirty (false);
    }
    void updateCamera (CameraHandle& camera) override;

    float render (CameraHandle& camera, InputEventRef& input, uint32_t frameNumber, bool reset) override;

 private:
    DenoisingHandler denoiser;
    PathTracerShared::PipelineLaunchParameters plp;
    CUdeviceptr plpOnDevice;
    RenderableNode pickedNode = nullptr;

    void initializeLaunchParameters (CameraHandle& camera);
    void resize (CameraHandle& camera);
    void pick (InputEventRef& input, CUstream& cuStream);

}; // end class PathTracer
