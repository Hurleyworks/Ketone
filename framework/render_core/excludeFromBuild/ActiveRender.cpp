// This source file was auto-generated by ClassMate++
// Created: 16 Sep 2017 12:15:26 pm
// Copyright (c) 2017, HurleyWorks

#include <optiX7Util/src/common.h>

#include "kernels/simple_shared.h"
#include "nvcc/CudaCompiler.h"

#include "OptiXState.h"
#include "handlers/PipelineHandler.h"
#include "handlers/MotionHandler.h"
#include "handlers/NoiseHandler.h"
#include "handlers/MaterialHandler.h"
#include "handlers/MeshHandler.h"
#include "handlers/SceneHandler.h"
#include "handlers/PickHandler.h"
#include "renderers/IRenderer.h"
#include "renderers/SimpleRenderer.h"

#include "RenderCore.h"
#include "ActiveRender.h"

using namespace qms;

// ctor
ActiveRender::ActiveRender() :
    impl (new RenderCore()),
    stateThread()
{
    // https://rafalcieslak.wordpress.com/2014/05/16/c11-stdthreads-managed-by-a-designated-class/
    start();
}

// dtor
ActiveRender::~ActiveRender()
{
    done();
    if (stateThread.joinable())
        stateThread.join();
}

// start
void ActiveRender::start()
{
    stateThread = std::thread (&ActiveRender::executeState, this);
}

// executeState
void ActiveRender::executeState()
{
    LOG (DBUG) << "ActiveRender thread is starting up";

    state = &ActiveRender::waitingForMessages;

    while (!shutdown)
    {
        (this->*state)();
    }

    LOG (DBUG) << "ActiveRender thread is shutting down";
}

// waitingForMessages
void ActiveRender::waitingForMessages()
{
    incoming.wait()
        .handle<qms::clear_queue> ([&] (qms::clear_queue const& msg) {
            shutdown = true;
        })
        .handle<QMS::init> ([&] (QMS::init const& msg) {
            messengers = msg.messengers;
            properties = msg.properties;
            state = &ActiveRender::init;
        })
        .handle<QMS::addNodeToRenderer> ([&] (QMS::addNodeToRenderer const& msg) {
            weakNode = msg.node;
            state = &ActiveRender::addRenderableNode;
        })
        .handle<QMS::renderNextFrame> ([&] (QMS::renderNextFrame const& msg) {
            camera = msg.camera;
            frameNumber = msg.frameNumber;
            state = &ActiveRender::renderNextFrame;
        })
        .handle<QMS::onInput> ([&] (QMS::onInput const& msg) {
            input = msg.input;
            state = &ActiveRender::onInput;
        })
        .handle<QMS::initRenderEngine> ([&] (QMS::initRenderEngine const& msg) {
            camera = msg.camera;
            state = &ActiveRender::initEngine;
        })
        .handle<QMS::tick> ([&] (QMS::tick const& msg) {
            frameNumber = msg.frame;
            state = &ActiveRender::onTick;
        });
}

// init
void ActiveRender::init()
{
    impl->init (messengers, properties);
    state = &ActiveRender::waitingForMessages;
}

// onTick
void ActiveRender::onTick()
{
    try
    {
        impl->tick (frameNumber);
    }
    catch (std::exception& e)
    {
        LOG (CRITICAL) << e.what();
        messengers.dreamer.send (QMS::onError (e.what()));
    }
    catch (...)
    {
        LOG (CRITICAL) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }

    state = &ActiveRender::waitingForMessages;
}

void ActiveRender::initEngine()
{
    try
    {
        if (camera)
            impl->initEngine (camera);
    }
    catch (std::exception& e)
    {
        done();
        LOG (CRITICAL) << e.what();
        messengers.dreamer.send (QMS::onError (e.what()));
    }
    catch (...)
    {
        done();
        LOG (CRITICAL) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }

    state = &ActiveRender::waitingForMessages;
}

void ActiveRender::renderNextFrame()
{
    try
    {
        if (camera)
            impl->render (camera, frameNumber);
    }
    catch (std::exception& e)
    {
        LOG (CRITICAL) << e.what();
        messengers.dreamer.send (QMS::onError (e.what()));

        // shutdown the render thread
        done();
    }
    catch (...)
    {
        LOG (CRITICAL) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));

        // shutdown the render thread
        done();
    }

    state = &ActiveRender::waitingForMessages;
}

void ActiveRender::addRenderableNode()
{
    try
    {
        if (!weakNode.expired())
            impl->addRenderableNode (weakNode.lock());
    }
    catch (std::exception& e)
    {
        LOG (CRITICAL) << e.what();
        messengers.dreamer.send (QMS::onError (e.what()));
    }
    catch (...)
    {
        LOG (CRITICAL) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }
    state = &ActiveRender::waitingForMessages;
}

void ActiveRender::onInput()
{
    try
    {
        impl->onInput (input);
    }
    catch (std::exception& e)
    {
        LOG (CRITICAL) << e.what();
        messengers.dreamer.send (QMS::onError (e.what()));
    }
    catch (...)
    {
        LOG (CRITICAL) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }

    state = &ActiveRender::waitingForMessages;
}