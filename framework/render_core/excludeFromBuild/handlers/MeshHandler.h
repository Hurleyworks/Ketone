// This header file was auto-generated by ClassMate++
// Created: 8 Sep 2020 8:44:40 pm
// Copyright (c) 2020, HurleyWorks

#pragma once

using sabi::MeshBuffersHandle;
using sabi::RenderableNode;
using MeshHandlerRef = std::shared_ptr<class MeshHandler>;

class MeshHandler
{
 public:
    static MeshHandlerRef create (OptiXStateRef state) { return std::make_shared<MeshHandler> (state); }
    using OptixVertices = std::vector<Shared::Vertex>;
    using OptixTriangles = std::vector<Shared::Triangle>;
    using OptixSurfaces = std::vector<OptixTriangles>;

 public:
    MeshHandler (OptiXStateRef state);
    ~MeshHandler();

    GeometryInstanceRef addRenderableGeometry (RenderableNode& node);
    GeometryGroupRef createGeometryGroup (RenderableNode& node, uint32_t materialSetCount, GeometryInstanceRef geomInst, PipelineHandlerRef& pipeline);
    InstanceRef createInstance (RenderableNode& node, GeometryGroupRef& geomGroup);
    void onSelectionStateChanged (RenderableNode& node);

 private:
    OptiXStateRef state = nullptr;

    uint32_t addVertices (MeshBuffersHandle& mesh, OptixVertices& vertices);
    uint32_t addAllTriangles (MeshBuffersHandle& mesh, OptixTriangles& triangles);

}; // end class MeshHandler
