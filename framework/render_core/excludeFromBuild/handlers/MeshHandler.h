// This header file was auto-generated by ClassMate++
// Created: 9 Aug 2020 3:08:12 pm
// Copyright (c) 2020, HurleyWorks

#pragma once

using Eigen::Affine3f;
using sabi::MeshBuffersHandle;
using sabi::RenderableNode;
using MoojiMeshRef = std::shared_ptr<class MeshHandler>;

class MeshHandler
{
 public:
    static MoojiMeshRef create() { return std::make_shared<MeshHandler>(); }

    using OptixVertices = std::vector<Shared::Vertex>;
    using OptixTriangles = std::vector<Shared::Triangle>;
    using OptixSurfaces = std::vector<OptixTriangles>;
    using MaterialIndexBuffers = std::vector<cudau::TypedBuffer<uint32_t>>;

 public:
    MeshHandler() = default;
    ~MeshHandler() = default;

    void initialize (MoojiStateRef& state);
    InstanceRef addRenderableNode (RenderableNode& node);
    void onSelectionStateChanged (RenderableNode& node);

 private:
    MoojiStateRef state = nullptr;
    MaterialHandler material;

    GeometryInstanceRef addRenderableGeometry (RenderableNode& node);
    uint32_t addVertices (MeshBuffersHandle& mesh, OptixVertices& vertices);
    void addSurfaceTriangles (MeshBuffersHandle& mesh, OptixSurfaces& optixSurfaces);
    uint32_t addAllTriangles (MeshBuffersHandle& mesh, OptixTriangles& triangles);
    InstanceRef createInstance (RenderableNode& node);
    uint32_t createGeometryGroup (GeometryInstanceRef& geomInst, uint32_t materialSetCount);

}; // end class MeshHandler
