// This header file was auto-generated by ClassMate++
// Created: 9 Aug 2020 3:08:12 pm
// Copyright (c) 2020, HurleyWorks

#pragma once

using sabi::PixelBuffer;
using sabi::RenderableNode;

class DenoisingHandler
{
 public:
    DenoisingHandler() = default;
    ~DenoisingHandler();

    void initialize (MoojiStateRef& state, uint32_t renderWidth, uint32_t renderHeight);
    void update (CUstream& curCuStream, int32_t renderWidth, int32_t renderHeight);

    CUsurfObject getColorAccumBuffer() { return colorAccumBuffer.getSurfaceObject (0); }
    CUsurfObject getAlbedoAccumBuffer() { return albedoAccumBuffer.getSurfaceObject (0); }
    CUsurfObject getNormalAccumBuffer() { return normalAccumBuffer.getSurfaceObject (0); }

    void getRender (PixelBuffer& pixels, RenderOutput outputType);

 private:
    MoojiStateRef state = nullptr;

    CUmodule moduleCopyBuffers;
    cudau::Kernel kernelCopyBuffers;

    optixu::HostBlockBuffer2D<float4, 1> accumBuffer;
    cudau::Array colorAccumBuffer;
    cudau::Array albedoAccumBuffer;
    cudau::Array normalAccumBuffer;

    cudau::TypedBuffer<float4> linearColorBuffer;
    cudau::TypedBuffer<float4> linearAlbedoBuffer;
    cudau::TypedBuffer<float4> linearNormalBuffer;
    cudau::TypedBuffer<float4> linearOutputBuffer;
    cudau::dim3 dimCopyBuffers;

    bool useTiledDenoising = false; 
    uint32_t tileWidth = 0;
    uint32_t tileHeight = 0;
    size_t stateSize = 0;
    size_t scratchSize = 0;
    size_t scratchSizeForComputeIntensity = 0;
    uint32_t numTasks = 0;

    optixu::Denoiser denoiser;
    cudau::Buffer denoiserStateBuffer;
    cudau::Buffer denoiserScratchBuffer;
    std::vector<optixu::DenoisingTask> denoisingTasks;
    CUdeviceptr hdrIntensity = 0;

}; // end class DenoisingHandler
