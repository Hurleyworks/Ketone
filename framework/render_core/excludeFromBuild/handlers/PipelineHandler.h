// This header file was auto-generated by ClassMate++
// Created: 8 Sep 2020 8:44:40 pm
// Copyright (c) 2020, HurleyWorks

#pragma once

using PipelineHandlerRef = std::shared_ptr<class PipelineHandler>;

class PipelineHandler
{
    // A pipeline contains all programs that are required for a particular ray-tracing launch. An
    // application may use a different pipeline for each launch, or may combine multiple
    // ray-generation programs into a single pipeline.
 public:
    virtual ~PipelineHandler();

    virtual void createPipeline (const std::string& ptxFolder) = 0;
    virtual uint32_t getSearchRayType() const = 0;
    virtual uint32_t getRayTypeCount() const = 0;
    virtual const optixu::ProgramGroup& getHitGroup() const = 0;
    virtual optixu::Pipeline& pl() = 0;

 protected:
    PipelineHandler (OptiXStateRef state);
    OptiXStateRef state = nullptr;

}; // end class PipelineHandler

class SimplestPipeline : public PipelineHandler
{
 public:
    static PipelineHandlerRef create (OptiXStateRef state) { return std::make_shared<SimplestPipeline> (state); }

 public:
    SimplestPipeline (OptiXStateRef state);
    ~SimplestPipeline();

    void createPipeline (const std::string& ptxFolder) override;
    uint32_t getSearchRayType() const override { return SimpleShared::RayType_Primary; }
    uint32_t getRayTypeCount() const override { return SimpleShared::NumRayTypes; }
    const optixu::ProgramGroup& getHitGroup() const override { return hitProgramGroup; }
    optixu::Pipeline& pl() override { return pipeline; }

 private:
    optixu::Pipeline pipeline;

    std::string ptxFolder;
    optixu::Module moduleOptiX;
    optixu::Module emptyModule;

    optixu::ProgramGroup rayGenProgram;
    optixu::ProgramGroup missProgram;
    optixu::ProgramGroup emptyMissProgram;
    optixu::ProgramGroup hitProgramGroup;

    cudau::Buffer shaderBindingTable;
    size_t sbtSize;
};
