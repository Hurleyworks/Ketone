// This header file was auto-generated by ClassMate++
// Created: 9 Aug 2020 3:08:12 pm
// Copyright (c) 2020, HurleyWorks

#pragma once

using sabi::RenderableNode;
using MoojiSceneRef = std::shared_ptr<class SceneHandler>;

class SceneHandler
{
 public:
    static MoojiSceneRef create() { return std::make_shared<SceneHandler>(); }

 public:
    SceneHandler() = default;
    ~SceneHandler();

    void initialize (MoojiStateRef& state);
    void addInstance (RenderableNode& node, InstanceRef& inst);

    void updateMotion()
    {
        motion.updateMotion();
        stateHasChanged();
    }

    void stateHasChanged (bool updateHitGroupSBT = false)
    {
        hitGroupSbtLayoutUpdated = updateHitGroupSBT;
        if (topGroup)
            topGroup->optixIAS.markDirty();

        updateState();
    }
    void clearScene (bool clearRenderables = true);

 private:
    MoojiStateRef state = nullptr;

    GroupRef topGroup = nullptr;
    bool traversablesUpdated = false;

    MotionHandler motion;

    // SBT
    cudau::Buffer* curHitGroupSBT;
    size_t hitGroupSbtSize;
    bool hitGroupSbtLayoutUpdated = true;

    void updateState (bool rebuildIAS = true);
    void createTopGroup (bool motionBlurEnabled = false);
    void rebuildGAS (const GeometryGroupRef& geomGroup, CUstream& curCuStream);

}; // end class SceneHandler
