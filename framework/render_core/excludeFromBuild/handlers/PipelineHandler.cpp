
// This source file was auto-generated by ClassMate++
// Created: 8 Sep 2020 8:44:40 pm
// Copyright (c) 2020, HurleyWorks

// ctor
PipelineHandler::PipelineHandler (OptiXStateRef state) :
    state (state)
{
}

// dtor
PipelineHandler::~PipelineHandler()
{
}

SimplestPipeline::SimplestPipeline (OptiXStateRef state) :
    PipelineHandler (state)
{
}

SimplestPipeline::~SimplestPipeline()
{
    try
    {
        shaderBindingTable.finalize();

        hitProgramGroup.destroy();
        missProgram.destroy();
        rayGenProgram.destroy();

        moduleOptiX.destroy();

        pipeline.destroy();
    }
    catch (std::exception& e)
    {
        LOG (CRITICAL) << e.what();
    }
    catch (...)
    {
        LOG (CRITICAL) << "Caught unknown exception!";
    }
}

void SimplestPipeline::createPipeline (const std::string& ptxFolder)
{
    pipeline = state->optixContext.createPipeline();
    pipeline.setPipelineOptions (3, 2, "plp", sizeof (SimpleShared::PipelineLaunchParameters),
                                 false, OPTIX_TRAVERSABLE_GRAPH_FLAG_ALLOW_SINGLE_LEVEL_INSTANCING,
                                 OPTIX_EXCEPTION_FLAG_STACK_OVERFLOW | OPTIX_EXCEPTION_FLAG_TRACE_DEPTH |
                                     OPTIX_EXCEPTION_FLAG_DEBUG,
                                 OPTIX_PRIMITIVE_TYPE_FLAGS_TRIANGLE);

    const std::string ptxPath = ptxFolder + "/simple_kernels.ptx";
    const std::string ptx = readTxtFile (ptxPath);
    if (!ptx.length()) throw std::runtime_error ("Failed to load ptx file at: " + ptxPath);

    moduleOptiX = pipeline.createModuleFromPTXString (
        ptx, OPTIX_COMPILE_DEFAULT_MAX_REGISTER_COUNT,
        OPTIX_COMPILE_OPTIMIZATION_DEFAULT,
        DEBUG_SELECT (OPTIX_COMPILE_DEBUG_LEVEL_LINEINFO, OPTIX_COMPILE_DEBUG_LEVEL_NONE));

    rayGenProgram = pipeline.createRayGenProgram (moduleOptiX, RT_RG_NAME_STR ("raygen"));
    missProgram = pipeline.createMissProgram (moduleOptiX, RT_MS_NAME_STR ("miss"));

    hitProgramGroup = pipeline.createHitProgramGroup (
        moduleOptiX, RT_CH_NAME_STR ("closesthit"),
        emptyModule, nullptr,
        emptyModule, nullptr);

    // EN: Trace depth is 1 because this sample trace rays only from the ray generation program.
    uint32_t maxTracDepth = 1;
    pipeline.link (maxTracDepth, DEBUG_SELECT (OPTIX_COMPILE_DEBUG_LEVEL_FULL, OPTIX_COMPILE_DEBUG_LEVEL_NONE));

    pipeline.setRayGenerationProgram (rayGenProgram);
    // If an exception program is not set but exception flags are set, the default exception program will by provided by OptiX.
    //pipeline.setExceptionProgram(exceptionProgram);
    pipeline.setNumMissRayTypes (SimpleShared::NumRayTypes);
    pipeline.setMissProgram (SimpleShared::RayType_Primary, missProgram);

    pipeline.generateShaderBindingTableLayout (&sbtSize);
    shaderBindingTable.initialize (state->cuContext, cudau::BufferType::Device, sbtSize, 1);
    shaderBindingTable.setMappedMemoryPersistent (true);
    pipeline.setShaderBindingTable (getView (shaderBindingTable), shaderBindingTable.getMappedPointer());

    pipeline.setScene (state->scene);
}
