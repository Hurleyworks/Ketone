// This header file was auto-generated by ClassMate++
// Created: 16 Jul 2020 9:21:09 pm
// Copyright (c) 2020, HurleyWorks

#pragma once

#include <nvrtc.h>

#define STRINGIFY(x) STRINGIFY2 (x)
#define STRINGIFY2(x) #x
#define LINE_STR STRINGIFY (__LINE__)

// Error check/report helper for users of the C API
#define NVRTC_CHECK_ERROR(func) \
    do \
    { \
        nvrtcResult code = func; \
        if (code != NVRTC_SUCCESS) \
            throw std::runtime_error ("ERROR: " __FILE__ "(" LINE_STR "): " + std::string (nvrtcGetErrorString (code))); \
    } while (0)

const char* rtcSource =
    R"(
#include <cuda/std/cstdint>
#include <cuda/std/cfloat>
#include <common.h>

RT_CALLABLE_PROGRAM float3 RT_DC_NAME(rtcDCProgram)(uint32_t texID, float2 texCoord) {
float2 rTexCoord = make_float2(texCoord.x - floor(texCoord.x),
                            texCoord.y - floor(texCoord.y));
bool b = (rTexCoord.x > 0.5f) ^ (rTexCoord.y > 0.5f);
float value = b ? 0.0f : 0.5f;
TESTER t;
return make_float3(value, value, value);
}
)";

void compileWithNVRTC()
{
    nvrtcProgram rtcProgram;
    nvrtcResult rtcResult;

    NVRTC_CHECK_ERROR (nvrtcCreateProgram (&rtcProgram, rtcSource, "rtcSource.cu", 0, nullptr, nullptr));

    const char* options[] = {
        "-std=c++17",
        "-arch",
        "compute_52",
        "-use_fast_math",
        "-lineinfo",
        "-rdc",
        "true",
        "-IC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.0\\include",
        "-IC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.0\\include/cuda/std/detail/libxx/include",
        "-IC:\\ProgramData\\NVIDIA Corporation\\OptiX SDK 7.1.0\\include",
        "-ID:\\ActiveWorks\\Code\\ActiveBerserko\\thirdparty\\optiX7Util\\src",
        "-ID:\\ActiveWorks\\Code\\ActiveBerserko\\framework\\mooji_core\\excludeFromBuild\\kernels",
        "-ID:\\ActiveWorks\\Code\\ActiveBerserko\\thirdparty",
        "-default-device",
    };

    size_t rtcLogSize;
    rtcResult = nvrtcCompileProgram (rtcProgram, lengthof (options), options);
    NVRTC_CHECK_ERROR (nvrtcGetProgramLogSize (rtcProgram, &rtcLogSize));
    char* rtcLog = new char[rtcLogSize];
    NVRTC_CHECK_ERROR (nvrtcGetProgramLog (rtcProgram, rtcLog));

    LOG (DBUG) << rtcLog;
    delete[] rtcLog;
    if (rtcResult != NVRTC_SUCCESS)
    {
        LOG(CRITICAL) << "Failed to compile a program.";
    }
}