// This source file was auto-generated by ClassMate++
// Created: 16 Sep 2017 12:15:26 pm
// Copyright (c) 2017, HurleyWorks


#include "GeoCore.h"
#include "ActiveGeo.h"

using namespace qms;

// ctor
ActiveGeo::ActiveGeo() :
    impl (new GeoCore()),
    stateThread()
{
    // https://rafalcieslak.wordpress.com/2014/05/16/c11-stdthreads-managed-by-a-designated-class/
    start();
}

// dtor
ActiveGeo::~ActiveGeo()
{
    done();
    if (stateThread.joinable())
        stateThread.join();
}

// start
void ActiveGeo::start()
{
    stateThread = std::thread (&ActiveGeo::executeState, this);
}

// executeState
void ActiveGeo::executeState()
{
    LOG (DBUG) << "ActiveGeo thread is starting up";

    state = &ActiveGeo::waitingForMessages;

    while (!shutdown)
    {
        (this->*state)();
    }

    LOG (DBUG) << "ActiveGeo thread is shutting down";
}

// waitingForMessages
void ActiveGeo::waitingForMessages()
{
    incoming.wait()
        .handle<qms::clear_queue> ([&] (qms::clear_queue const& msg) {
            shutdown = true;
        })
        .handle<QMS::init> ([&] (QMS::init const& msg) {
            messengers = msg.messengers;
            properties = msg.properties;
            state = &ActiveGeo::init;
        })
        .handle<QMS::processLoadData> ([&] (QMS::processLoadData const& msg) {
            loadData = std::move (msg.loadData);
            state = &ActiveGeo::processLoadData;
        })
        .handle<QMS::makeGroundPlane> ([&] (QMS::makeGroundPlane const& msg) {
            size2D = msg.size;
            state = &ActiveGeo::createGround;
        })
        .handle<QMS::tick> ([&] (QMS::tick const& msg) {
            frameNumber = msg.frame;
            state = &ActiveGeo::onTick;
        });
}

// init
void ActiveGeo::init()
{
    impl->init (messengers, properties);
    state = &ActiveGeo::waitingForMessages;
}

// onTick
void ActiveGeo::onTick()
{
    try
    {
        impl->tick (frameNumber);
    }
    catch (std::exception& e)
    {
        LOG (CRITICAL) << e.what();
        messengers.dreamer.send (QMS::onError (e.what()));
    }
    catch (...)
    {
        LOG (CRITICAL) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }

    state = &ActiveGeo::waitingForMessages;
}

void ActiveGeo::processLoadData()
{
    try
    {
        impl->processLoadData (std::move (loadData));
    }
    catch (std::exception& e)
    {
        LOG (CRITICAL) << e.what();
        messengers.dreamer.send (QMS::onError (e.what()));
    }
    catch (...)
    {
        LOG (CRITICAL) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }

    state = &ActiveGeo::waitingForMessages;
}

void ActiveGeo::createGround()
{
    try
    {
        impl->createGroundPlane (size2D);
    }
    catch (std::exception& e)
    {
        LOG (CRITICAL) << e.what();
        messengers.dreamer.send (QMS::onError (e.what()));
    }
    catch (...)
    {
        LOG (CRITICAL) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }

    state = &ActiveGeo::waitingForMessages;
}