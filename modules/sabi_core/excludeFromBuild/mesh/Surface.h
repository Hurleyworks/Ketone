// This header file was auto-generated by ClassMate++
// Created: 16 Sep 2017 5:37:16 pm
// Copyright (c) 2017, HurleyWorks

#pragma once

class Surface
{
    //  A surface is a collection of triangles with a specific Material and a Name

 public:
    Surface (const std::string& name = "default") :
        name (name)
    {
        F.resize (3, 0);
    }
    ~Surface() = default;

    MatrixXu& indices() { return F; }
    const MatrixXu& indices() const { return F; }

    MatrixXu& unweldedIndices() { return FU; }
    const MatrixXu& unweldedIndices() const { return FU; }

    MatrixXf& faceNormals() { return FN; }
    const MatrixXf& faceNormals() const { return FN; }

    const size_t triangleCount() const { return F.cols(); }
    void setName (const std::string& name) { this->name = name; }
    const std::string getName() const { return name; }

    void setMaterial (const Material& m) { material = m; }
    const Material& getMaterial() const { return material; }
    Material& getMaterial() { return material; }

    void addVertexMap (VertexMapRef& vmap)
    {
        vmaps.insert (std::make_pair (vmap->name, vmap));
    }
    VertexMapRef getVertexMap (const std::string& name)
    {
        auto it = vmaps.find (name);

        return it == vmaps.end() ? nullptr : it->second;
    }
    bool hasVertexMap (const std::string& name)
    {
        auto it = vmaps.find (name);
        return it != vmaps.end();
    }

    const VMapDB& getVMapDB() const { return vmaps; }
    uint32_t vertexMapCount() const { return vmaps.size(); }
    void clearVertexMaps() { vmaps.clear(); }

 private:
    MatrixXu F;  // triangle indices
    MatrixXf FN; //face normals
    MatrixXu FU; // unwelded triangle indices

    Material material;
    std::string name = "default surface";

    VMapDB vmaps; // collection of vertex maps like UV or Weight

}; // end class Surface

using Surfaces = std::vector<sabi::Surface>;