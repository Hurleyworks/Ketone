// This header file was auto-generated by ClassMate++
// Created: 10 Sep 2019 6:19:49 pm
// Copyright (c) 2019, HurleyWorks

#pragma once

static const char* VertexMapTypeTable[] =
    {
        "UV",
        "Color",
        "Weight",
        "Morph",
        "Invalid"};

struct VertexMapType
{
    enum EVertexMapType
    {
        UV,
        Color,
        Weight,
        Morph,
        Count,
        Invalid = Count
    };

    union
    {
        EVertexMapType name;
        unsigned int value;
    };

    VertexMapType (EVertexMapType name) :
        name (name) {}
    VertexMapType (unsigned int value) :
        value (value) {}
    VertexMapType() :
        value (Invalid) {}
    operator EVertexMapType() const { return name; }
    const char* toString() const { return VertexMapTypeTable[value]; }
};

typedef std::shared_ptr<struct VertexMap> VertexMapRef;

struct VertexMap
{
    static VertexMapRef create() { return std::make_shared<VertexMap>(); }

    VertexMap()
    {
        reset();
    }
    ~VertexMap() {}

    void reset()
    {
        name = INVALID_NAME;
        VertexMapType type = VertexMapType::Invalid;
        dim = 0;
        isMapped.resize (0);
        values.resize (0,0);
        //VectorXu indices;
        count = 0;
    }

    void resetValues()
    {
        isMapped.resize (0);
        values.resize (0, 0);
        //VectorXu indices;
        count = 0;
    }

    std::string name = INVALID_NAME;
    VertexMapType type = VertexMapType::Invalid;
    short dim = 0;
    VectorXb isMapped;
    MatrixXf values;
    //VectorXu indices;
    uint32_t count = 0;

}; // end class VertexMap

typedef std::unordered_map<std::string, VertexMapRef> VMapDB;