// This header file was auto-generated by ClassMate++
// Created: 16 Sep 2017 5:37:16 pm
// Copyright (c) 2017, HurleyWorks

#pragma once

struct RenderableDesc
{
    // full path to file containing mesh, materials etc
    std::string fullFilePath = INVALID_PATH;

    void resetToDefault()
    {
        fullFilePath = INVALID_PATH;
    }

    void debug()
    {
        LOG (DBUG) << "FullFilePath: " << fullFilePath;
    }
};


using RenderableDataHandle = std::shared_ptr<struct RenderableData>;

struct RenderableData
{
    sabi::MeshBuffersHandle mesh = nullptr;
    std::string name = "unnamed";
    ItemID sceneID = INVALID_ID;
    BodyID clientID = INVALID_ID;
    ItemID sourceID = INVALID_ID; // for instances
    sabi::SpaceTime spacetime;
    sabi::RenderableDesc desc;
    sabi::RenderableState state;
    sabi::MeshOptions meshOptions;

    void debug()
    {
        LOG (DBUG) << "name: " << name;
        LOG (DBUG) << "sceneID: " << sceneID;
        LOG (DBUG) << "clientID: " << clientID;
        LOG (DBUG) << "instanaced from ID: " << sourceID;
        LOG (DBUG) << "state: " << state.toString();
        LOG (DBUG) << "mesh options: " << meshOptions.toString();

        desc.debug();

        mace::matStr4f (spacetime.worldTransform, DBUG, "World transform");
        mace::vecStr3f (spacetime.scale, DBUG, "Scale");

        if (mesh)
        {
            LOG (DBUG) << "Mesh has " << mesh->pointCount() << " vertices";
            LOG (DBUG) << "Mesh has " << mesh->triangleCount() << " triangles";
        }
    }
};

using LoadData = std::vector<RenderableData>;