// This header file was auto-generated by ClassMate++
// Created: 16 Sep 2017 5:37:16 pm
// Copyright (c) 2017, HurleyWorks

#pragma once

static const char* PRenderableStateTable[] =
    {
        "Pickable",
        "Selected",
        "SelectionChanged",
        "Deletable",
        "Visible",
        "Invalid"};

struct PRenderableState
{
    enum EPRenderableState
    {
        Pickable = 1 << 0,
        Selected = 1 << 1,
        SelectionChanged = 1 << 2,
        Deletable = 1 << 3,
        Visible = 1 << 4,
        Invalid = 1 << 5
    };

    union
    {
        EPRenderableState name;
        unsigned long value;
    };

    PRenderableState (EPRenderableState name) :
        name (name) {}
    PRenderableState (unsigned long value) :
        value (value) {}
    PRenderableState() :
        value (0) {}
    void clear() { value = 0; }
    operator EPRenderableState() const { return name; }
    unsigned long operator|= (PRenderableState m) { return value |= m; }
    unsigned long operator&= (PRenderableState m) { return value &= m; }
    unsigned long operator^= (PRenderableState m) { return value ^= m; }

    std::string toString()
    {
        std::ostringstream ostr;
        ostr << "  PRenderableState::";

        if (value & Pickable)
            ostr << "Pickable:";

        if (value & Selected)
            ostr << "Selected:";

        if (value & SelectionChanged)
            ostr << "SelectionChanged:";

        if (value & Deletable)
            ostr << "Deletable:";

        if (value & Visible)
            ostr << "Visible:";

        if (value & Invalid)
            ostr << "Invalid:";

        return ostr.str();
    }
};

// the state of a RenderableNode
struct RenderableState
{
    bool isSelected() const { return (state & PRenderableState::Selected) == PRenderableState::Selected; }
    bool hasSelectionChanged() const { return (state & PRenderableState::SelectionChanged) == PRenderableState::SelectionChanged; }
    bool isPickable() const { return (state & PRenderableState::Pickable) == PRenderableState::Pickable; }
    bool isDeletable() const { return (state & PRenderableState::Deletable) == PRenderableState::Deletable; }
    bool isVisible() const { return (state & PRenderableState::Visible) == PRenderableState::Visible; }

    std::string toString() { return state.toString(); }

    PRenderableState state = 0;
};