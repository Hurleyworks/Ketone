// This source file was auto-generated by ClassMate++
// Created: 18 Aug 2019 6:10:35 am
// Copyright (c) 2019, HurleyWorks

#include "Controller.h"

using Eigen::Vector2f;
using Eigen::Vector3f;
using wabi::Ray3f;

// ctor
Controller::Controller (const PropertyService& properties) :
    properties (properties)
{
}

void Controller::onInput (InputEventRef& input, CameraHandle& camera)
{
    input->setPicking (false);

    mouseCoords = Vector2f (input->getX(), input->getY());
    const int winx = static_cast<int> (mouseCoords.x());
    const int winy = static_cast<int> (mouseCoords.y());
    float zoomFactor = DEFAULT_ZOOM_FACTOR;

    // shift key to increase Zoom factor
    if (input->getKeyboardModifiers() & InputEvent::Shift)
    {
        zoomFactor *= 10.0f;
    }

    switch (input->getType())
    {
        case InputEvent::Press:
        {
            if (input->getButton() == InputEvent::Left)
            {
                camera->startTracking();
                camera->track (Vector2f (input->getX(), input->getY()));
            }
            break;
        }

        case InputEvent::Release:
        {
            camera->setDirty (false);
            break;
        }

        case InputEvent::Move:
            break;

        case InputEvent::ScrollUp:
            camera->zoom (zoomFactor);
            camera->setDirty (true);
            break;

        case InputEvent::ScrollDown:
            camera->zoom (zoomFactor * -1);
            camera->setDirty (true);
            break;

        case InputEvent::Drag:

            // LB for camera, RMB for picking
            if (input->getButton() == InputEvent::Left)
            {
                camera->track (Vector2f (input->getX(), input->getY()));
                camera->setDirty (true);
            }
            else if (input->getButton() == InputEvent::Right)
            {
            }

            break;

        case InputEvent::KeyPress:
        {
            // d key to deselect all
            if (input->getKey() == 68)
            {
                camera->setDirty (true);
                emitDeselectAll();
            }

            break;
        }

        case InputEvent::KeyRelease:
            break;

        case InputEvent::KeyRepeat:
            break;
    }
}
