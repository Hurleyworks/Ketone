// This source file was auto-generated by ClassMate++
// Created: 24 Jul 2019 5:49:34 pm
// Copyright (c) 2019, HurleyWorks

#include "Dreamer.h"
#include "ActiveDreamer.h"

using namespace qms;

// ctor
ActiveDreamer::ActiveDreamer() :
    impl (new Dreamer()),
    stateThread()
{
    // https://rafalcieslak.wordpress.com/2014/05/16/c11-stdthreads-managed-by-a-designated-class/
    start();
}

// dtor
ActiveDreamer::~ActiveDreamer()
{
    done();
    if (stateThread.joinable())
        stateThread.join();
}

// start
void ActiveDreamer::start()
{
    stateThread = std::thread (&ActiveDreamer::executeState, this);
}

// executeState
void ActiveDreamer::executeState()
{
    LOG (DBUG) << "ActiveDreamer thread is starting up";

    state = &ActiveDreamer::waitingForMessages;

    while (!shutdown)
    {
        (this->*state)();
    }

    LOG (DBUG) << "ActiveDreamer thread is shutting down";
}

// waitingForMessages
void ActiveDreamer::waitingForMessages()
{
    incoming.wait()
        .handle<qms::clear_queue> ([&] (qms::clear_queue const& msg) {
            shutdown = true;
        })
        .handle<QMS::init> ([&] (QMS::init const& msg) {
            messengers = msg.messengers;
            properties = msg.properties;
            state = &ActiveDreamer::init;
        })
        .handle<QMS::tick> ([&] (QMS::tick const& msg) {
            frameNumber = msg.frame;
            state = &ActiveDreamer::onTick;
        });
}

// init
void ActiveDreamer::init()
{
    impl->init (messengers, properties);
    state = &ActiveDreamer::waitingForMessages;
}

// onTick
void ActiveDreamer::onTick()
{
    try
    {
        impl->tick (frameNumber);
    }
    catch (std::exception& e)
    {
        LOG (CRITICAL) << e.what();
        messengers.dreamer.send (QMS::onError (e.what()));
    }
    catch (...)
    {
        LOG (CRITICAL) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }

    state = &ActiveDreamer::waitingForMessages;
}

void ActiveDreamer::onWindowClose()
{
    try
    {
    }
    catch (std::exception& e)
    {
        LOG (CRITICAL) << e.what();
        messengers.dreamer.send (QMS::onError (e.what()));
    }
    catch (...)
    {
        LOG (CRITICAL) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }

    state = &ActiveDreamer::waitingForMessages;
}

void ActiveDreamer::onDrop()
{
    try
    {
    }
    catch (std::exception& e)
    {
        LOG (CRITICAL) << e.what();
        messengers.dreamer.send (QMS::onError (e.what()));
    }
    catch (...)
    {
        LOG (CRITICAL) << "Caught unknown exception!";
        messengers.dreamer.send (QMS::onError ("Caught unknown exception!"));
    }

    state = &ActiveDreamer::waitingForMessages;
}
