//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-28540450
// Cuda compilation tools, release 11.0, V11.0.194
// Based on LLVM 3.4svn
//

.version 7.0
.target sm_75
.address_size 64

	// .globl	__raygen__raygen
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.const .align 1 .b8 PermutationTable[76] = {0, 10, 2, 7, 3, 5, 6, 4, 8, 1, 9, 5, 11, 6, 8, 1, 10, 12, 9, 3, 7, 0, 4, 2, 13, 10, 11, 5, 6, 9, 4, 3, 8, 7, 14, 2, 0, 1, 15, 12, 1, 13, 5, 14, 12, 3, 6, 16, 0, 8, 9, 2, 11, 4, 15, 7, 10, 10, 6, 5, 8, 15, 0, 17, 7, 14, 18, 13, 16, 2, 9, 12, 1, 11, 4, 3};
.const .align 8 .b8 plp[120];
.global .align 1 .b8 $str[23] = {35, 35, 35, 35, 120, 120, 32, 80, 105, 99, 107, 32, 68, 97, 116, 97, 32, 35, 35, 35, 35, 10, 0};
.global .align 1 .b8 $str1[23] = {80, 105, 99, 107, 32, 111, 114, 105, 103, 105, 110, 10, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 0};
.global .align 1 .b8 $str2[26] = {80, 105, 99, 107, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 10, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 0};
.global .align 1 .b8 $str3[21] = {72, 105, 116, 32, 112, 111, 105, 110, 116, 10, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 0};
.global .align 1 .b8 $str4[46] = {35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 10, 0};

.visible .entry __raygen__raygen(

)
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<3>;
	.reg .f32 	%f<87>;
	.reg .b32 	%r<39>;
	.reg .f64 	%fd<7>;
	.reg .b64 	%rd<18>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	// inline asm
	call (%r4), _optix_get_launch_index_x, ();
	// inline asm
	// inline asm
	call (%r5), _optix_get_launch_index_y, ();
	// inline asm
	cvt.rn.f32.u32	%f15, %r4;
	add.ftz.f32 	%f16, %f15, 0f3F000000;
	ld.const.v2.u32 	{%r7, %r8}, [plp+8];
	cvt.rn.f32.s32	%f1, %r7;
	div.approx.ftz.f32 	%f85, %f16, %f1;
	sub.s32 	%r11, %r8, %r5;
	cvt.rn.f32.u32	%f17, %r11;
	add.ftz.f32 	%f18, %f17, 0fBF000000;
	cvt.rn.f32.s32	%f3, %r8;
	div.approx.ftz.f32 	%f86, %f18, %f3;
	ld.const.u32 	%r3, [plp+112];
	setp.eq.s32	%p1, %r3, 0;
	@%p1 bra 	BB0_2;

	ld.const.v2.f32 	{%f19, %f20}, [plp+104];
	div.approx.ftz.f32 	%f85, %f19, %f1;
	div.approx.ftz.f32 	%f86, %f20, %f3;

BB0_2:
	ld.const.u64 	%rd1, [plp+96];
	cvta.to.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 4294967295;
	st.global.u32 	[%rd2+4], %rd3;
	st.global.u32 	[%rd2], %rd3;
	ld.const.v2.f32 	{%f23, %f24}, [plp+40];
	mul.ftz.f32 	%f27, %f24, 0f3F000000;
	sin.approx.ftz.f32 	%f28, %f27;
	cos.approx.ftz.f32 	%f29, %f27;
	div.approx.ftz.f32 	%f30, %f28, %f29;
	add.ftz.f32 	%f31, %f30, %f30;
	mul.ftz.f32 	%f32, %f23, %f31;
	ld.const.v2.f32 	{%f33, %f34}, [plp+48];
	ld.const.v2.f32 	{%f35, %f36}, [plp+56];
	mov.f32 	%f38, 0f3F000000;
	sub.ftz.f32 	%f39, %f38, %f85;
	mul.ftz.f32 	%f40, %f39, %f32;
	add.ftz.f32 	%f41, %f86, 0fBF000000;
	mul.ftz.f32 	%f42, %f41, %f31;
	ld.const.v2.f32 	{%f43, %f44}, [plp+72];
	ld.const.v2.f32 	{%f47, %f48}, [plp+80];
	ld.const.v2.f32 	{%f51, %f52}, [plp+64];
	ld.const.v2.f32 	{%f55, %f56}, [plp+88];
	mul.ftz.f32 	%f59, %f42, %f43;
	fma.rn.ftz.f32 	%f60, %f36, %f40, %f59;
	add.ftz.f32 	%f61, %f48, %f60;
	mul.ftz.f32 	%f62, %f42, %f44;
	fma.rn.ftz.f32 	%f63, %f40, %f51, %f62;
	add.ftz.f32 	%f64, %f55, %f63;
	mul.ftz.f32 	%f65, %f42, %f47;
	fma.rn.ftz.f32 	%f66, %f40, %f52, %f65;
	add.ftz.f32 	%f67, %f56, %f66;
	mul.ftz.f32 	%f68, %f64, %f64;
	fma.rn.ftz.f32 	%f69, %f61, %f61, %f68;
	fma.rn.ftz.f32 	%f70, %f67, %f67, %f69;
	rsqrt.approx.ftz.f32 	%f71, %f70;
	mul.ftz.f32 	%f12, %f61, %f71;
	mul.ftz.f32 	%f13, %f64, %f71;
	mul.ftz.f32 	%f14, %f71, %f67;
	@%p1 bra 	BB0_4;

	mov.u64 	%rd4, $str;
	cvta.global.u64 	%rd5, %rd4;
	mov.u64 	%rd6, 0;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r12, [retval0+0];
	
	//{
	}// Callseq End 0
	cvt.ftz.f64.f32	%fd1, %f33;
	add.u64 	%rd7, %SP, 0;
	add.u64 	%rd8, %SPL, 0;
	st.local.f64 	[%rd8], %fd1;
	cvt.ftz.f64.f32	%fd2, %f34;
	st.local.f64 	[%rd8+8], %fd2;
	cvt.ftz.f64.f32	%fd3, %f35;
	st.local.f64 	[%rd8+16], %fd3;
	mov.u64 	%rd9, $str1;
	cvta.global.u64 	%rd10, %rd9;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r13, [retval0+0];
	
	//{
	}// Callseq End 1
	cvt.ftz.f64.f32	%fd4, %f12;
	st.local.f64 	[%rd8], %fd4;
	cvt.ftz.f64.f32	%fd5, %f13;
	st.local.f64 	[%rd8+8], %fd5;
	cvt.ftz.f64.f32	%fd6, %f14;
	st.local.f64 	[%rd8+16], %fd6;
	mov.u64 	%rd11, $str2;
	cvta.global.u64 	%rd12, %rd11;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd12;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r14, [retval0+0];
	
	//{
	}// Callseq End 2

BB0_4:
	ld.const.u64 	%rd13, [plp];
	mov.u32 	%r18, 255;
	mov.u32 	%r21, 1;
	mov.u32 	%r22, 0;
	mov.f32 	%f79, 0f7F7FFFFF;
	mov.f32 	%f80, 0f00000000;
	// inline asm
	call (%r15, %r16, %r17), _optix_trace_3, (%rd13, %f33, %f34, %f35, %f12, %f13, %f14, %f80, %f79, %f80, %r18, %r22, %r22, %r21, %r22, %r26, %r27, %r28);
	// inline asm
	ld.const.u64 	%rd14, [plp+16];
	cvta.to.global.u64 	%rd15, %rd14;
	ld.const.u32 	%r29, [plp+32];
	shr.u32 	%r30, %r5, 1;
	shr.u32 	%r31, %r4, 1;
	mad.lo.s32 	%r32, %r29, %r30, %r31;
	shl.b32 	%r33, %r32, 2;
	and.b32  	%r34, %r5, 1;
	shl.b32 	%r35, %r34, 1;
	and.b32  	%r36, %r4, 1;
	add.s32 	%r37, %r35, %r36;
	add.s32 	%r38, %r37, %r33;
	mul.wide.u32 	%rd16, %r38, 16;
	add.s64 	%rd17, %rd15, %rd16;
	mov.b32 	 %f81, %r17;
	mov.b32 	 %f82, %r16;
	mov.b32 	 %f83, %r15;
	mov.f32 	%f84, 0f3F800000;
	st.global.v4.f32 	[%rd17], {%f83, %f82, %f81, %f84};
	ret;
}

	// .globl	__miss__miss
.visible .entry __miss__miss(

)
{
	.reg .b32 	%r<4>;


	mov.u32 	%r2, 0;
	// inline asm
	call _optix_set_payload_0, (%r2);
	// inline asm
	// inline asm
	call _optix_set_payload_1, (%r2);
	// inline asm
	mov.u32 	%r3, 1036831949;
	// inline asm
	call _optix_set_payload_2, (%r3);
	// inline asm
	ret;
}

	// .globl	__closesthit__closesthit
.visible .entry __closesthit__closesthit(

)
{
	.local .align 8 .b8 	__local_depot2[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<11>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<422>;
	.reg .b32 	%r<169>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<152>;


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	// inline asm
	call (%rd10), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%f138, %f139), _optix_get_triangle_barycentrics, ();
	// inline asm
	// inline asm
	call (%r6), _optix_read_primitive_idx, ();
	// inline asm
	ld.const.u32 	%r7, [plp+112];
	setp.eq.s32	%p1, %r7, 0;
	@%p1 bra 	BB2_2;

	ld.const.u64 	%rd11, [plp+96];
	cvta.to.global.u64 	%rd12, %rd11;
	st.global.u32 	[%rd12+4], %r6;
	// inline asm
	call (%r8), _optix_read_instance_idx, ();
	// inline asm
	st.global.u32 	[%rd12], %r8;
	// inline asm
	call (%f140), _optix_get_world_ray_origin_x, ();
	// inline asm
	// inline asm
	call (%f141), _optix_get_world_ray_origin_y, ();
	// inline asm
	// inline asm
	call (%f142), _optix_get_world_ray_origin_z, ();
	// inline asm
	// inline asm
	call (%f143), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f144), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f145), _optix_get_world_ray_direction_z, ();
	// inline asm
	// inline asm
	call (%f146), _optix_get_ray_tmax, ();
	// inline asm
	fma.rn.ftz.f32 	%f147, %f143, %f146, %f140;
	fma.rn.ftz.f32 	%f148, %f144, %f146, %f141;
	fma.rn.ftz.f32 	%f149, %f145, %f146, %f142;
	st.global.f32 	[%rd12+8], %f147;
	st.global.f32 	[%rd12+12], %f148;
	st.global.f32 	[%rd12+16], %f149;
	cvt.ftz.f64.f32	%fd1, %f147;
	cvt.ftz.f64.f32	%fd2, %f148;
	cvt.ftz.f64.f32	%fd3, %f149;
	add.u64 	%rd13, %SP, 0;
	add.u64 	%rd14, %SPL, 0;
	st.local.f64 	[%rd14], %fd1;
	st.local.f64 	[%rd14+8], %fd2;
	st.local.f64 	[%rd14+16], %fd3;
	mov.u64 	%rd15, $str3;
	cvta.global.u64 	%rd16, %rd15;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd16;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd13;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r9, [retval0+0];
	
	//{
	}// Callseq End 3
	mov.u64 	%rd17, $str4;
	cvta.global.u64 	%rd18, %rd17;
	mov.u64 	%rd19, 0;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd18;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd19;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r10, [retval0+0];
	
	//{
	}// Callseq End 4
	bra.uni 	BB2_24;

BB2_2:
	ld.v2.f32 	{%f150, %f151}, [%rd10+8];
	ld.f32 	%f5, [%rd10+16];
	ld.u64 	%rd20, [%rd10+24];
	ld.u64 	%rd21, [%rd10+32];
	mul.wide.s32 	%rd22, %r6, 12;
	add.s64 	%rd23, %rd21, %rd22;
	ld.u32 	%r12, [%rd23];
	ld.u32 	%r13, [%rd23+4];
	ld.u32 	%r14, [%rd23+8];
	add.ftz.f32 	%f152, %f138, %f139;
	mov.f32 	%f153, 0f3F800000;
	sub.ftz.f32 	%f154, %f153, %f152;
	mul.wide.u32 	%rd24, %r12, 32;
	add.s64 	%rd25, %rd20, %rd24;
	ld.f32 	%f155, [%rd25+12];
	ld.f32 	%f156, [%rd25+16];
	ld.f32 	%f157, [%rd25+20];
	mul.wide.u32 	%rd26, %r13, 32;
	add.s64 	%rd27, %rd20, %rd26;
	ld.f32 	%f158, [%rd27+12];
	mul.ftz.f32 	%f159, %f138, %f158;
	ld.f32 	%f160, [%rd27+16];
	mul.ftz.f32 	%f161, %f138, %f160;
	ld.f32 	%f162, [%rd27+20];
	mul.ftz.f32 	%f163, %f138, %f162;
	fma.rn.ftz.f32 	%f164, %f154, %f155, %f159;
	fma.rn.ftz.f32 	%f165, %f154, %f156, %f161;
	fma.rn.ftz.f32 	%f166, %f154, %f157, %f163;
	mul.wide.u32 	%rd28, %r14, 32;
	add.s64 	%rd29, %rd20, %rd28;
	ld.f32 	%f167, [%rd29+12];
	ld.f32 	%f168, [%rd29+16];
	ld.f32 	%f169, [%rd29+20];
	fma.rn.ftz.f32 	%f6, %f139, %f167, %f164;
	fma.rn.ftz.f32 	%f7, %f139, %f168, %f165;
	fma.rn.ftz.f32 	%f421, %f139, %f169, %f166;
	// inline asm
	call (%r11), _optix_get_transform_list_size, ();
	// inline asm
	setp.eq.s32	%p2, %r11, 0;
	@%p2 bra 	BB2_3;

	mov.u32 	%r168, 0;
	// inline asm
	call (%f170), _optix_get_ray_time, ();
	// inline asm

BB2_5:
	.pragma "nounroll";
	// inline asm
	call (%rd30), _optix_get_transform_list_handle, (%r168);
	// inline asm
	// inline asm
	call (%r17), _optix_get_transform_type_from_handle, (%rd30);
	// inline asm
	and.b32  	%r18, %r17, -2;
	setp.eq.s32	%p3, %r18, 2;
	@%p3 bra 	BB2_11;
	bra.uni 	BB2_6;

BB2_11:
	setp.eq.s32	%p6, %r17, 2;
	@%p6 bra 	BB2_15;
	bra.uni 	BB2_12;

BB2_15:
	// inline asm
	call (%rd104), _optix_get_matrix_motion_transform_from_handle, (%rd30);
	// inline asm
	// inline asm
	cvta.to.global.u64 %rd106, %rd104;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r106,%r107,%r108,%r109}, [%rd106];
	// inline asm
	mov.b32	{%rs3, %rs4}, %r108;
	add.s64 	%rd110, %rd104, 16;
	// inline asm
	cvta.to.global.u64 %rd109, %rd110;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r110,%r111,%r112,%r113}, [%rd109];
	// inline asm
	add.s64 	%rd113, %rd104, 32;
	// inline asm
	cvta.to.global.u64 %rd112, %rd113;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r114,%r115,%r116,%r117}, [%rd112];
	// inline asm
	add.s64 	%rd116, %rd104, 48;
	// inline asm
	cvta.to.global.u64 %rd115, %rd116;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r118,%r119,%r120,%r121}, [%rd115];
	// inline asm
	add.s64 	%rd119, %rd104, 64;
	// inline asm
	cvta.to.global.u64 %rd118, %rd119;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r122,%r123,%r124,%r125}, [%rd118];
	// inline asm
	add.s64 	%rd122, %rd104, 80;
	// inline asm
	cvta.to.global.u64 %rd121, %rd122;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r126,%r127,%r128,%r129}, [%rd121];
	// inline asm
	add.s64 	%rd125, %rd104, 96;
	// inline asm
	cvta.to.global.u64 %rd124, %rd125;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r130,%r131,%r132,%r133}, [%rd124];
	// inline asm
	add.s64 	%rd128, %rd104, 112;
	// inline asm
	cvta.to.global.u64 %rd127, %rd128;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r134,%r135,%r136,%r137}, [%rd127];
	// inline asm
	mov.b32 	 %f272, %r109;
	mov.b32 	 %f273, %r110;
	cvt.u32.u16	%r150, %rs3;
	add.s32 	%r151, %r150, -1;
	cvt.rn.f32.s32	%f274, %r151;
	sub.ftz.f32 	%f275, %f170, %f272;
	mul.ftz.f32 	%f276, %f275, %f274;
	sub.ftz.f32 	%f277, %f273, %f272;
	div.approx.ftz.f32 	%f278, %f276, %f277;
	min.ftz.f32 	%f279, %f274, %f278;
	mov.f32 	%f280, 0f00000000;
	max.ftz.f32 	%f281, %f280, %f279;
	cvt.rmi.ftz.f32.f32	%f282, %f281;
	cvt.rzi.ftz.s32.f32	%r152, %f282;
	cvt.s64.s32	%rd9, %r152;
	mul.wide.s32 	%rd139, %r152, 48;
	add.s64 	%rd131, %rd113, %rd139;
	// inline asm
	cvta.to.global.u64 %rd130, %rd131;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r138,%r139,%r140,%r141}, [%rd130];
	// inline asm
	mov.b32 	 %f398, %r138;
	mov.b32 	 %f399, %r139;
	mov.b32 	 %f400, %r140;
	add.s64 	%rd134, %rd131, 16;
	// inline asm
	cvta.to.global.u64 %rd133, %rd134;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r142,%r143,%r144,%r145}, [%rd133];
	// inline asm
	mov.b32 	 %f395, %r142;
	mov.b32 	 %f396, %r143;
	mov.b32 	 %f397, %r144;
	add.s64 	%rd137, %rd131, 32;
	// inline asm
	cvta.to.global.u64 %rd136, %rd137;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r146,%r147,%r148,%r149}, [%rd136];
	// inline asm
	sub.ftz.f32 	%f74, %f281, %f282;
	mov.b32 	 %f392, %r146;
	mov.b32 	 %f393, %r147;
	mov.b32 	 %f394, %r148;
	setp.leu.ftz.f32	%p8, %f74, 0f00000000;
	@%p8 bra 	BB2_17;

	mul.lo.s64 	%rd149, %rd9, 48;
	add.s64 	%rd150, %rd104, %rd149;
	add.s64 	%rd141, %rd150, 80;
	// inline asm
	cvta.to.global.u64 %rd140, %rd141;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r153,%r154,%r155,%r156}, [%rd140];
	// inline asm
	mov.b32 	 %f283, %r153;
	mov.b32 	 %f284, %r154;
	mov.b32 	 %f285, %r155;
	add.s64 	%rd144, %rd150, 96;
	// inline asm
	cvta.to.global.u64 %rd143, %rd144;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r157,%r158,%r159,%r160}, [%rd143];
	// inline asm
	mov.b32 	 %f286, %r157;
	mov.b32 	 %f287, %r158;
	mov.b32 	 %f288, %r159;
	add.s64 	%rd147, %rd150, 112;
	// inline asm
	cvta.to.global.u64 %rd146, %rd147;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r161,%r162,%r163,%r164}, [%rd146];
	// inline asm
	mov.f32 	%f289, 0f3F800000;
	sub.ftz.f32 	%f290, %f289, %f74;
	mul.ftz.f32 	%f291, %f74, %f283;
	mul.ftz.f32 	%f292, %f74, %f284;
	mul.ftz.f32 	%f293, %f74, %f285;
	fma.rn.ftz.f32 	%f398, %f290, %f398, %f291;
	fma.rn.ftz.f32 	%f399, %f290, %f399, %f292;
	fma.rn.ftz.f32 	%f400, %f290, %f400, %f293;
	mul.ftz.f32 	%f294, %f74, %f286;
	mul.ftz.f32 	%f295, %f74, %f287;
	mul.ftz.f32 	%f296, %f74, %f288;
	fma.rn.ftz.f32 	%f395, %f290, %f395, %f294;
	fma.rn.ftz.f32 	%f396, %f290, %f396, %f295;
	fma.rn.ftz.f32 	%f397, %f290, %f397, %f296;
	mov.b32 	 %f297, %r161;
	mov.b32 	 %f298, %r162;
	mov.b32 	 %f299, %r163;
	mul.ftz.f32 	%f300, %f74, %f297;
	mul.ftz.f32 	%f301, %f74, %f298;
	mul.ftz.f32 	%f302, %f74, %f299;
	fma.rn.ftz.f32 	%f392, %f290, %f392, %f300;
	fma.rn.ftz.f32 	%f393, %f290, %f393, %f301;
	fma.rn.ftz.f32 	%f394, %f290, %f394, %f302;
	bra.uni 	BB2_17;

BB2_6:
	mov.f32 	%f401, 0f00000000;
	setp.eq.s32	%p4, %r17, 4;
	@%p4 bra 	BB2_9;
	bra.uni 	BB2_7;

BB2_9:
	// inline asm
	call (%rd151), _optix_get_instance_inverse_transform_from_handle, (%rd30);
	// inline asm
	bra.uni 	BB2_10;

BB2_12:
	// inline asm
	call (%rd45), _optix_get_srt_motion_transform_from_handle, (%rd30);
	// inline asm
	// inline asm
	cvta.to.global.u64 %rd47, %rd45;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r31,%r32,%r33,%r34}, [%rd47];
	// inline asm
	mov.b32	{%rs1, %rs2}, %r33;
	add.s64 	%rd51, %rd45, 16;
	// inline asm
	cvta.to.global.u64 %rd50, %rd51;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r35,%r36,%r37,%r38}, [%rd50];
	// inline asm
	add.s64 	%rd54, %rd45, 32;
	// inline asm
	cvta.to.global.u64 %rd53, %rd54;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r39,%r40,%r41,%r42}, [%rd53];
	// inline asm
	add.s64 	%rd57, %rd45, 48;
	// inline asm
	cvta.to.global.u64 %rd56, %rd57;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r43,%r44,%r45,%r46}, [%rd56];
	// inline asm
	add.s64 	%rd60, %rd45, 64;
	// inline asm
	cvta.to.global.u64 %rd59, %rd60;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r47,%r48,%r49,%r50}, [%rd59];
	// inline asm
	add.s64 	%rd63, %rd45, 80;
	// inline asm
	cvta.to.global.u64 %rd62, %rd63;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r51,%r52,%r53,%r54}, [%rd62];
	// inline asm
	add.s64 	%rd66, %rd45, 96;
	// inline asm
	cvta.to.global.u64 %rd65, %rd66;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r55,%r56,%r57,%r58}, [%rd65];
	// inline asm
	add.s64 	%rd69, %rd45, 112;
	// inline asm
	cvta.to.global.u64 %rd68, %rd69;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r59,%r60,%r61,%r62}, [%rd68];
	// inline asm
	add.s64 	%rd72, %rd45, 128;
	// inline asm
	cvta.to.global.u64 %rd71, %rd72;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r63,%r64,%r65,%r66}, [%rd71];
	// inline asm
	add.s64 	%rd75, %rd45, 144;
	// inline asm
	cvta.to.global.u64 %rd74, %rd75;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r67,%r68,%r69,%r70}, [%rd74];
	// inline asm
	mov.b32 	 %f181, %r34;
	mov.b32 	 %f182, %r35;
	cvt.u32.u16	%r87, %rs1;
	add.s32 	%r88, %r87, -1;
	cvt.rn.f32.s32	%f183, %r88;
	sub.ftz.f32 	%f184, %f170, %f181;
	mul.ftz.f32 	%f185, %f184, %f183;
	sub.ftz.f32 	%f186, %f182, %f181;
	div.approx.ftz.f32 	%f187, %f185, %f186;
	min.ftz.f32 	%f188, %f183, %f187;
	mov.f32 	%f189, 0f00000000;
	max.ftz.f32 	%f190, %f189, %f188;
	cvt.rmi.ftz.f32.f32	%f191, %f190;
	cvt.rzi.ftz.s32.f32	%r89, %f191;
	cvt.s64.s32	%rd7, %r89;
	mul.wide.s32 	%rd89, %r89, 64;
	add.s64 	%rd78, %rd54, %rd89;
	// inline asm
	cvta.to.global.u64 %rd77, %rd78;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r71,%r72,%r73,%r74}, [%rd77];
	// inline asm
	mov.b32 	 %f382, %r71;
	mov.b32 	 %f383, %r72;
	mov.b32 	 %f384, %r73;
	add.s64 	%rd81, %rd78, 16;
	// inline asm
	cvta.to.global.u64 %rd80, %rd81;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r75,%r76,%r77,%r78}, [%rd80];
	// inline asm
	mov.b32 	 %f385, %r75;
	mov.b32 	 %f386, %r76;
	mov.b32 	 %f387, %r78;
	add.s64 	%rd84, %rd78, 32;
	// inline asm
	cvta.to.global.u64 %rd83, %rd84;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r79,%r80,%r81,%r82}, [%rd83];
	// inline asm
	sub.ftz.f32 	%f34, %f190, %f191;
	mov.b32 	 %f388, %r80;
	mov.b32 	 %f389, %r81;
	mov.b32 	 %f390, %r82;
	add.s64 	%rd87, %rd78, 48;
	// inline asm
	cvta.to.global.u64 %rd86, %rd87;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r83,%r84,%r85,%r86}, [%rd86];
	// inline asm
	mov.b32 	 %f391, %r83;
	setp.leu.ftz.f32	%p7, %f34, 0f00000000;
	@%p7 bra 	BB2_14;

	shl.b64 	%rd102, %rd7, 6;
	add.s64 	%rd103, %rd102, %rd45;
	add.s64 	%rd91, %rd103, 96;
	// inline asm
	cvta.to.global.u64 %rd90, %rd91;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r90,%r91,%r92,%r93}, [%rd90];
	// inline asm
	mov.b32 	 %f192, %r90;
	mov.b32 	 %f193, %r91;
	mov.b32 	 %f194, %r92;
	add.s64 	%rd94, %rd103, 112;
	// inline asm
	cvta.to.global.u64 %rd93, %rd94;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r94,%r95,%r96,%r97}, [%rd93];
	// inline asm
	mov.b32 	 %f195, %r94;
	mov.b32 	 %f196, %r95;
	mov.b32 	 %f197, %r97;
	add.s64 	%rd97, %rd103, 128;
	// inline asm
	cvta.to.global.u64 %rd96, %rd97;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r98,%r99,%r100,%r101}, [%rd96];
	// inline asm
	mov.b32 	 %f198, %r99;
	mov.b32 	 %f199, %r100;
	mov.b32 	 %f200, %r101;
	add.s64 	%rd100, %rd103, 144;
	// inline asm
	cvta.to.global.u64 %rd99, %rd100;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r102,%r103,%r104,%r105}, [%rd99];
	// inline asm
	mov.f32 	%f201, 0f3F800000;
	sub.ftz.f32 	%f202, %f201, %f34;
	mul.ftz.f32 	%f203, %f34, %f192;
	mul.ftz.f32 	%f204, %f34, %f193;
	mul.ftz.f32 	%f205, %f34, %f194;
	fma.rn.ftz.f32 	%f382, %f202, %f382, %f203;
	fma.rn.ftz.f32 	%f383, %f202, %f383, %f204;
	fma.rn.ftz.f32 	%f384, %f202, %f384, %f205;
	mul.ftz.f32 	%f206, %f34, %f195;
	mul.ftz.f32 	%f207, %f34, %f196;
	mul.ftz.f32 	%f208, %f34, %f197;
	fma.rn.ftz.f32 	%f385, %f202, %f385, %f206;
	fma.rn.ftz.f32 	%f386, %f202, %f386, %f207;
	fma.rn.ftz.f32 	%f387, %f202, %f387, %f208;
	mul.ftz.f32 	%f209, %f34, %f198;
	mul.ftz.f32 	%f210, %f34, %f199;
	mul.ftz.f32 	%f211, %f34, %f200;
	fma.rn.ftz.f32 	%f212, %f202, %f388, %f209;
	fma.rn.ftz.f32 	%f213, %f202, %f389, %f210;
	fma.rn.ftz.f32 	%f214, %f202, %f390, %f211;
	mov.b32 	 %f215, %r102;
	mul.ftz.f32 	%f216, %f34, %f215;
	fma.rn.ftz.f32 	%f217, %f202, %f391, %f216;
	mul.ftz.f32 	%f218, %f213, %f213;
	fma.rn.ftz.f32 	%f219, %f212, %f212, %f218;
	fma.rn.ftz.f32 	%f220, %f214, %f214, %f219;
	fma.rn.ftz.f32 	%f221, %f217, %f217, %f220;
	rsqrt.approx.ftz.f32 	%f222, %f221;
	mul.ftz.f32 	%f388, %f212, %f222;
	mul.ftz.f32 	%f389, %f213, %f222;
	mul.ftz.f32 	%f390, %f214, %f222;
	mul.ftz.f32 	%f391, %f217, %f222;

BB2_14:
	mul.ftz.f32 	%f223, %f389, %f389;
	fma.rn.ftz.f32 	%f224, %f388, %f388, %f223;
	fma.rn.ftz.f32 	%f225, %f390, %f390, %f224;
	fma.rn.ftz.f32 	%f226, %f391, %f391, %f225;
	rcp.approx.ftz.f32 	%f227, %f226;
	mul.ftz.f32 	%f228, %f388, %f227;
	mul.ftz.f32 	%f229, %f389, %f227;
	mul.ftz.f32 	%f230, %f390, %f227;
	mul.ftz.f32 	%f231, %f391, %f227;
	mul.ftz.f32 	%f232, %f388, %f228;
	mul.ftz.f32 	%f233, %f389, %f229;
	mul.ftz.f32 	%f234, %f390, %f230;
	mul.ftz.f32 	%f235, %f388, %f229;
	mul.ftz.f32 	%f236, %f390, %f231;
	mul.ftz.f32 	%f237, %f388, %f230;
	mul.ftz.f32 	%f238, %f389, %f231;
	mul.ftz.f32 	%f239, %f389, %f230;
	mul.ftz.f32 	%f240, %f388, %f231;
	sub.ftz.f32 	%f241, %f232, %f233;
	sub.ftz.f32 	%f242, %f241, %f234;
	fma.rn.ftz.f32 	%f243, %f391, %f231, %f242;
	sub.ftz.f32 	%f244, %f235, %f236;
	add.ftz.f32 	%f245, %f244, %f244;
	add.ftz.f32 	%f246, %f237, %f238;
	add.ftz.f32 	%f247, %f246, %f246;
	add.ftz.f32 	%f248, %f235, %f236;
	add.ftz.f32 	%f249, %f248, %f248;
	sub.ftz.f32 	%f250, %f233, %f232;
	sub.ftz.f32 	%f251, %f250, %f234;
	fma.rn.ftz.f32 	%f252, %f391, %f231, %f251;
	sub.ftz.f32 	%f253, %f239, %f240;
	add.ftz.f32 	%f254, %f253, %f253;
	sub.ftz.f32 	%f255, %f237, %f238;
	add.ftz.f32 	%f256, %f255, %f255;
	add.ftz.f32 	%f257, %f239, %f240;
	add.ftz.f32 	%f258, %f257, %f257;
	neg.ftz.f32 	%f259, %f232;
	sub.ftz.f32 	%f260, %f259, %f233;
	add.ftz.f32 	%f261, %f234, %f260;
	fma.rn.ftz.f32 	%f262, %f391, %f231, %f261;
	mul.ftz.f32 	%f263, %f384, %f243;
	fma.rn.ftz.f32 	%f264, %f386, %f245, %f263;
	fma.rn.ftz.f32 	%f400, %f387, %f247, %f264;
	mul.ftz.f32 	%f265, %f386, %f252;
	fma.rn.ftz.f32 	%f266, %f384, %f249, %f265;
	fma.rn.ftz.f32 	%f397, %f387, %f254, %f266;
	mul.ftz.f32 	%f267, %f386, %f258;
	fma.rn.ftz.f32 	%f268, %f384, %f256, %f267;
	fma.rn.ftz.f32 	%f394, %f387, %f262, %f268;
	mul.ftz.f32 	%f269, %f383, %f243;
	fma.rn.ftz.f32 	%f399, %f385, %f245, %f269;
	mul.ftz.f32 	%f270, %f385, %f252;
	fma.rn.ftz.f32 	%f396, %f383, %f249, %f270;
	mul.ftz.f32 	%f271, %f385, %f258;
	fma.rn.ftz.f32 	%f393, %f383, %f256, %f271;
	mul.ftz.f32 	%f398, %f382, %f243;
	mul.ftz.f32 	%f395, %f382, %f249;
	mul.ftz.f32 	%f392, %f382, %f256;

BB2_17:
	mul.ftz.f32 	%f303, %f393, %f397;
	mul.ftz.f32 	%f304, %f394, %f396;
	sub.ftz.f32 	%f305, %f304, %f303;
	mul.ftz.f32 	%f306, %f398, %f305;
	mul.ftz.f32 	%f307, %f392, %f397;
	mul.ftz.f32 	%f308, %f394, %f395;
	sub.ftz.f32 	%f309, %f308, %f307;
	mul.ftz.f32 	%f310, %f309, %f399;
	sub.ftz.f32 	%f311, %f306, %f310;
	mul.ftz.f32 	%f312, %f392, %f396;
	mul.ftz.f32 	%f313, %f393, %f395;
	sub.ftz.f32 	%f314, %f313, %f312;
	fma.rn.ftz.f32 	%f315, %f314, %f400, %f311;
	rcp.approx.ftz.f32 	%f316, %f315;
	mul.ftz.f32 	%f407, %f305, %f316;
	mul.ftz.f32 	%f317, %f394, %f399;
	mul.ftz.f32 	%f318, %f393, %f400;
	sub.ftz.f32 	%f319, %f318, %f317;
	mul.ftz.f32 	%f408, %f316, %f319;
	mul.ftz.f32 	%f320, %f396, %f400;
	mul.ftz.f32 	%f321, %f397, %f399;
	sub.ftz.f32 	%f322, %f321, %f320;
	mul.ftz.f32 	%f409, %f316, %f322;
	sub.ftz.f32 	%f323, %f307, %f308;
	mul.ftz.f32 	%f404, %f323, %f316;
	mul.ftz.f32 	%f324, %f392, %f400;
	mul.ftz.f32 	%f325, %f394, %f398;
	sub.ftz.f32 	%f326, %f325, %f324;
	mul.ftz.f32 	%f405, %f316, %f326;
	mul.ftz.f32 	%f327, %f397, %f398;
	mul.ftz.f32 	%f328, %f395, %f400;
	sub.ftz.f32 	%f329, %f328, %f327;
	mul.ftz.f32 	%f406, %f316, %f329;
	mul.ftz.f32 	%f401, %f314, %f316;
	mul.ftz.f32 	%f330, %f393, %f398;
	mul.ftz.f32 	%f331, %f392, %f399;
	sub.ftz.f32 	%f332, %f331, %f330;
	mul.ftz.f32 	%f402, %f332, %f316;
	mul.ftz.f32 	%f333, %f395, %f399;
	mul.ftz.f32 	%f334, %f396, %f398;
	sub.ftz.f32 	%f335, %f334, %f333;
	mul.ftz.f32 	%f403, %f335, %f316;
	bra.uni 	BB2_18;

BB2_7:
	setp.ne.s32	%p5, %r17, 1;
	mov.f32 	%f402, %f401;
	mov.f32 	%f403, %f153;
	mov.f32 	%f404, %f401;
	mov.f32 	%f405, %f153;
	mov.f32 	%f406, %f401;
	mov.f32 	%f407, %f153;
	mov.f32 	%f408, %f401;
	mov.f32 	%f409, %f401;
	@%p5 bra 	BB2_18;

	// inline asm
	call (%rd32), _optix_get_static_transform_from_handle, (%rd30);
	// inline asm
	add.s64 	%rd151, %rd32, 64;

BB2_10:
	// inline asm
	cvta.to.global.u64 %rd36, %rd151;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r19,%r20,%r21,%r22}, [%rd36];
	// inline asm
	mov.b32 	 %f407, %r19;
	mov.b32 	 %f408, %r20;
	mov.b32 	 %f409, %r21;
	add.s64 	%rd40, %rd151, 16;
	// inline asm
	cvta.to.global.u64 %rd39, %rd40;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r23,%r24,%r25,%r26}, [%rd39];
	// inline asm
	mov.b32 	 %f404, %r23;
	mov.b32 	 %f405, %r24;
	mov.b32 	 %f406, %r25;
	add.s64 	%rd43, %rd151, 32;
	// inline asm
	cvta.to.global.u64 %rd42, %rd43;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r27,%r28,%r29,%r30}, [%rd42];
	// inline asm
	mov.b32 	 %f401, %r27;
	mov.b32 	 %f402, %r28;
	mov.b32 	 %f403, %r29;

BB2_18:
	setp.eq.s32	%p9, %r168, 0;
	@%p9 bra 	BB2_19;
	bra.uni 	BB2_20;

BB2_19:
	mov.f32 	%f381, %f401;
	mov.f32 	%f380, %f402;
	mov.f32 	%f379, %f403;
	mov.f32 	%f378, %f404;
	mov.f32 	%f377, %f405;
	mov.f32 	%f376, %f406;
	mov.f32 	%f375, %f407;
	mov.f32 	%f374, %f408;
	mov.f32 	%f373, %f409;
	bra.uni 	BB2_21;

BB2_20:
	mul.ftz.f32 	%f336, %f378, %f408;
	fma.rn.ftz.f32 	%f337, %f375, %f407, %f336;
	fma.rn.ftz.f32 	%f114, %f381, %f409, %f337;
	mul.ftz.f32 	%f338, %f377, %f408;
	fma.rn.ftz.f32 	%f339, %f374, %f407, %f338;
	fma.rn.ftz.f32 	%f115, %f380, %f409, %f339;
	mul.ftz.f32 	%f340, %f376, %f408;
	fma.rn.ftz.f32 	%f341, %f373, %f407, %f340;
	fma.rn.ftz.f32 	%f116, %f379, %f409, %f341;
	mul.ftz.f32 	%f342, %f378, %f405;
	fma.rn.ftz.f32 	%f343, %f375, %f404, %f342;
	fma.rn.ftz.f32 	%f117, %f381, %f406, %f343;
	mul.ftz.f32 	%f344, %f377, %f405;
	fma.rn.ftz.f32 	%f345, %f374, %f404, %f344;
	fma.rn.ftz.f32 	%f118, %f380, %f406, %f345;
	mul.ftz.f32 	%f346, %f376, %f405;
	fma.rn.ftz.f32 	%f347, %f373, %f404, %f346;
	fma.rn.ftz.f32 	%f119, %f379, %f406, %f347;
	mul.ftz.f32 	%f348, %f378, %f402;
	fma.rn.ftz.f32 	%f349, %f375, %f401, %f348;
	fma.rn.ftz.f32 	%f381, %f381, %f403, %f349;
	mul.ftz.f32 	%f350, %f377, %f402;
	fma.rn.ftz.f32 	%f351, %f374, %f401, %f350;
	fma.rn.ftz.f32 	%f380, %f380, %f403, %f351;
	mul.ftz.f32 	%f352, %f376, %f402;
	fma.rn.ftz.f32 	%f353, %f373, %f401, %f352;
	fma.rn.ftz.f32 	%f379, %f379, %f403, %f353;
	mov.f32 	%f378, %f117;
	mov.f32 	%f377, %f118;
	mov.f32 	%f376, %f119;
	mov.f32 	%f375, %f114;
	mov.f32 	%f374, %f115;
	mov.f32 	%f373, %f116;

BB2_21:
	add.s32 	%r168, %r168, 1;
	setp.lt.u32	%p10, %r168, %r11;
	@%p10 bra 	BB2_5;

	mul.ftz.f32 	%f354, %f6, %f375;
	fma.rn.ftz.f32 	%f355, %f7, %f378, %f354;
	fma.rn.ftz.f32 	%f419, %f421, %f381, %f355;
	mul.ftz.f32 	%f356, %f6, %f374;
	fma.rn.ftz.f32 	%f357, %f7, %f377, %f356;
	fma.rn.ftz.f32 	%f420, %f421, %f380, %f357;
	mul.ftz.f32 	%f358, %f6, %f373;
	fma.rn.ftz.f32 	%f359, %f7, %f376, %f358;
	fma.rn.ftz.f32 	%f421, %f421, %f379, %f359;
	bra.uni 	BB2_23;

BB2_3:
	mov.f32 	%f419, %f6;
	mov.f32 	%f420, %f7;

BB2_23:
	mul.ftz.f32 	%f360, %f420, %f420;
	fma.rn.ftz.f32 	%f361, %f419, %f419, %f360;
	fma.rn.ftz.f32 	%f362, %f421, %f421, %f361;
	rsqrt.approx.ftz.f32 	%f363, %f362;
	mul.ftz.f32 	%f364, %f419, %f363;
	mul.ftz.f32 	%f365, %f420, %f363;
	mul.ftz.f32 	%f366, %f421, %f363;
	fma.rn.ftz.f32 	%f367, %f364, 0f3F000000, 0f3F000000;
	fma.rn.ftz.f32 	%f368, %f365, 0f3F000000, 0f3F000000;
	fma.rn.ftz.f32 	%f369, %f366, 0f3F000000, 0f3F000000;
	mul.ftz.f32 	%f370, %f150, %f367;
	mov.b32 	 %r165, %f370;
	mul.ftz.f32 	%f371, %f151, %f368;
	mov.b32 	 %r166, %f371;
	mul.ftz.f32 	%f372, %f5, %f369;
	mov.b32 	 %r167, %f372;
	// inline asm
	call _optix_set_payload_0, (%r165);
	// inline asm
	// inline asm
	call _optix_set_payload_1, (%r166);
	// inline asm
	// inline asm
	call _optix_set_payload_2, (%r167);
	// inline asm

BB2_24:
	ret;
}


